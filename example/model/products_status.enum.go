package model

import (
	"database/sql/driver"
	"fmt"
	"reflect"
)

// ProductsStatus is generated type for enum 'products_status'
type ProductsStatus int64

const (
	_ ProductsStatus = iota
	OutOfStock
	InStock
	RunningLow // less than 20
)

// Scan implements Scan() from the sql.Scanner interface for "products_status"
// See: https://pkg.go.dev/database/sql#Scanner
func (v *ProductsStatus) Scan(i interface{}) (err error) {
	s, ok := i.([]uint8)
	if !ok {
		return fmt.Errorf("value (%#v) is not of the expected type []uint8", i)
	}
	switch {
	case reflect.DeepEqual(s, []uint8("out_of_stock")):
		*v = OutOfStock
	case reflect.DeepEqual(s, []uint8("in_stock")):
		*v = InStock
	case reflect.DeepEqual(s, []uint8("running_low")):
		*v = RunningLow
	default:
		err = fmt.Errorf("unable to parse %#v into a known ProductsStatus type", i)
	}
	return
}

// Value implements Value() from the driver.Valuer interface for "products_status"
// See: https://pkg.go.dev/database/sql/driver#Valuer
func (v ProductsStatus) Value() (out driver.Value, err error) {
	switch v {
	case 1:
		out = "out_of_stock"
	case 2:
		out = "in_stock"
	case 3:
		out = "running_low"
	default:
		err = fmt.Errorf("unable to parse %#v into a known ProductsStatus string", v)
	}
	return
}

/*
Generated by dbml-go
    version: v1.0.0
    timestamp: 2023-02-01 16:21:33.955432753 +0000 UTC m=+0.003570792
*/
